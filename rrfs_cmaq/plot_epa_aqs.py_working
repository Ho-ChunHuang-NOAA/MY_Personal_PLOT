# mark a known place to help us geo-locate ourselves
## Markers
## ========================================
## character      description
## ========================================
## '.'            point marker
## ','            pixel marker
## 'o'            circle marker
## 'v'            triangle_down marker
## '^'            triangle_up marker
## '<'            triangle_left marker
## '>'            triangle_right marker
## '1'            tri_down marker
## '2'            tri_up marker
## '3'            tri_left marker
## '4'            tri_right marker
## 's'            square marker
## 'p'            pentagon marker
## '*'            star marker
## 'h'            hexagon1 marker
## 'H'            hexagon2 marker
## '+'            plus marker
## 'x'            x marker
## 'D'            diamond marker
## 'd'            thin_diamond marker
## '|'            vline marker
## '_'            hline marker
## 
## Line Styles
## ========================================
## character      description
## ========================================
## '-'            solid line style
## '--'           dashed line style
## '-.'           dash-dot line style
## ':'            dotted line style
## 
## Example format strings:
## 
## 'b'    # blue markers with default shape
## 'or'   # red circles
## '-g'   # green solid line
## '--'   # dashed line with default color
## '^k:'  # black triangle_up markers connected by a dotted line
## 
## Colors
## 
## The supported color abbreviations are the single letter codes
## ========================================
## character      color
## ========================================
## 'b'            blue
## 'g'            green
## 'r'            red
## 'c'            cyan
## 'm'            magenta
## 'y'            yellow
## 'k'            black
## 'w'            white
## from mpl_toolkits.basemap import Basemap
import sys
import datetime
import shutil
import subprocess
import fnmatch
import cartopy.crs as ccrs
import cartopy.feature as cfeature
import os
import numpy as np
import netCDF4 as netcdf
import re
import maps2d_plot_util as maps2d_plot_util
import warnings
import logging
import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.colors
import matplotlib.gridspec as gridspec

def rewind(f):
    f.seek(0)

def get_o3_color(o3_conc):
    scale = [ (0.8627,0.8627,1.0000), (0.6471,0.6471,1.0000),
              (0.4314,0.4314,1.0000), (0.0000,0.7490,1.0000), (0.0000,1.0000,1.0000),
              (0.0000,0.7060,0.0000), (0.0000,0.9060,0.0000), (0.3020,1.0000,0.3020),
              (1.0000,1.0000,0.4980), (1.0000,0.8745,0.0000), (1.0000,0.6471,0.0000),
              (0.9412,0.5098,0.1569), (1.0000,0.0000,0.0000), (0.7020,0.0000,0.0000),
              (0.4310,0.2780,0.7250) ]
    clevs = [       3.,  6.,
               9., 12., 25.,
              35., 45., 55.,
              65., 70., 75.,
              85., 95., 105. ]
    nclev=len(clevs)
    color=[]
    for val in o3_conc:
        if val < clevs[0]:
            print("under - color idnex is 0")
            color.append(scale[0])
        else:
            if val < clevs[nclev-1]:
                for i in range(1,nclev-2):
                    if val >= clevs[i-1] and val < clevs[i]:
                        print("val = "+str(val)+" >= "+str(clevs[i-1])+" < "+str(clevs[i])+" - color idnex is "+str(i))
                        color.append(scale[i])
            else:
                print("over - color idnex is "+str(nclev-1))
                color.append(scale[nclev-1])
        
    return color
def get_pm_color(pm_conc):
    clevs = [       3.,   6.,
               9.,  12., 15.,
              35.,  55., 75.,
             100., 125., 150.,
             250., 300., 400.,
             500., 600., 750. ]
    scale = [ (0.8627,0.8627,1.0000), (0.0000,0.7060,0.0000),
              (0.0000,0.9060,0.0000), (0.3020,1.0000,0.3020), (1.0000,1.0000,0.4980),
              (1.0000,0.8745,0.0000), (1.0000,0.6471,0.0000), (1.0000,0.3840,0.3840),
              (1.0000,0.0000,0.0000), (0.8000,0.0000,0.0000), (0.7020,0.0000,0.0000),
              (0.6120,0.5100,0.8120), (0.5180,0.3880,0.7650), (0.4310,0.2780,0.7250),
              (0.2980,0.1920,0.5020), (0.4706,0.4706,0.4706), (0.7843,0.7843,0.7843),
              (0.9412,0.9412,0.9412) ]

    nclev=len(clevs)
    color=[]
    for val in pm_conc:
        if val < clevs[0]:
            print("under - color idnex is 0")
            color.append(scale[0])
        else:
            if val < clevs[nclev-1]:
                for i in range(1,nclev-2):
                    if val >= clevs[i-1] and val < clevs[i]:
                        print("val = "+str(val)+" >= "+str(clevs[i-1])+" < "+str(clevs[i])+" - color idnex is "+str(i))
                        color.append(scale[i])
            else:
                print("over - color idnex is "+str(nclev-1))
                color.append(scale[nclev-1])
        
    color=[]
    return color
### PASSED AGRUEMENTS
if len(sys.argv) < 2:
    print("you must set 3 arguments as hour[HH} start_date end_date in yyyymmdd")
    sys.exit()
else:
    proc_hour = sys.argv[1]
    start_date = sys.argv[2]
    end_date = sys.argv[3]

sdate = datetime.datetime(int(start_date[0:4]), int(start_date[4:6]), int(start_date[6:]), int(proc_hour) )
edate = datetime.datetime(int(end_date[0:4]), int(end_date[4:6]), int(end_date[6:]), int(proc_hour) )
date_inc = datetime.timedelta(hours=24)
hour_inc = datetime.timedelta(hours=1)
YMD_date_format = "%Y%m%d"
YM_date_format = "%Y%m"
MD_date_format = "%m%d"
Y_date_format = "%Y"
M_date_format = "%m"
D_date_format = "%d"
H_date_format = "%H"

warnings.filterwarnings('ignore')
plt.rcParams['font.weight'] = 'bold'
plt.rcParams['axes.labelsize'] = 15
plt.rcParams['axes.labelweight'] = 'bold'
plt.rcParams['xtick.labelsize'] = 15
plt.rcParams['ytick.labelsize'] = 15
plt.rcParams['axes.titlesize'] = 15
plt.rcParams['axes.titleweight'] = 'bold'
plt.rcParams['axes.formatter.useoffset'] = False
area_ref=['can',  'na', 'conus', 'se', 'sw', 'ne',  'nw', 'mdn', 'mds', 'ak', 'hi', 'east', 'west']
lat0_ref=[40.,   0.,   24.,     24.,  30.,  37.,   38.,  38.,   24.,   52.,  18.,  24.,     24.5]
lat1_ref=[70.,   70.,  50.,     38.,  45.,  48.,   52.,  52.,   40.,   72.,  23.,  50.,     54.5]
lon0_ref=[ -141., -141.,  -124.,   -95., -125, -82, -125.,-105., -105., -170.,-161.,-100.,     -128. ]
lon1_ref=[  -60., -60.,   -70.,    -79., -105.,-67.,-103.,-85.,  -85.,  -130.,-154.,-65.,     -90. ]
figdir="/gpfs/dell1/stmp/Ho-Chun.Huang"
##title = [ "dset", "conus", "east us", "west us", "ne us", "nw us", "se us", "sw us", "alaska", "hawaii", "us-can" ] 
reg = [   "dset", "conus", "east", "west",   "ne",   "nw",   "se",   "sw",  "mdn",  "mds",   "ak",   "hi",  "can" ] 
rlon0 = [ -175.0, -124.0,  -100.0, -128.0,  -82.0, -125.0,  -95.0, -125.0, -105.0, -105.0, -170.0, -161.0, -141.0 ]
rlon1 = [  -55.0,  -70.0,   -65.0,  -90.0,  -67.0, -103.0,  -79.0, -105.0,  -85.0,  -85.0, -130.0, -154.0,  -60.0 ]
rlat0 = [    0.0,   22.0,    22.0,   24.5,   37.0,   38.0,   24.0,   30.0,   38.0,   24.0,   52.0,   18.0,   38.0 ]
rlat1 = [   70.0,   51.0,    50.0,   54.5,   48.0,   52.0,   38.0,   45.0,   52.0,   40.0,   72.0,   23.0,   70.0 ]
## iplot = [      1,      1,       1,      1,      1,      1,      1,      1,      1,      1,      1,      1,      1 ]
## iplot = [      0,      0,       0,      0,      1,      1,      1,      1,      0,      0,      0,      0,      0 ]
iplot = [      0,      1,       0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0 ]
symsize= [     3,      3,       4,      4,      5,      5,      5,      5,      5,      5,      5,      5,      4 ]
ilen=len(iplot)
print("iplot length = "+str(ilen))
datadir="/gpfs/dell2/emc/modeling/noscrub/Ho-Chun.Huang/epa_airnow_acsii"
working_dir="/gpfs/dell1/stmp/Ho-Chun.Huang/working/epa_ascii"
date = sdate
while date <= edate:
    ## Shift obs time to model fcst time
    ## EPA OBS is backward average value and AQM output is forward average values
    ## For example, EPA 10Z is the mean values for the period of 10Z-11Z
    ##              AQM 11Z is the mean values for the period of 10Z-11Z
    label_date = date + hour_inc
    figout=figdir+"/epa_aqs_"+date.strftime(YMD_date_format)
    if os.path.exists(figout):
        shutil.rmtree(figout)
    os.mkdir(figout)
    filein=datadir+"/"+date.strftime(Y_date_format)+"/"+date.strftime(YMD_date_format)+"/HourlyAQObs_"+date.strftime(YMD_date_format)+proc_hour+".dat"
    if os.path.isfile(filein):
        print(filein+" exists")
        f = open( filein, "r" )
        line_count=0
        num_data=0
        o3lat=[]
        o3lon=[]
        o3conc=[]
        num_o3=0

        pm25lat=[]
        pm25lon=[]
        pm25conc=[]
        num_pm25=0

        pm10lat=[]
        pm10lon=[]
        pm10conc=[]
        num_pm10=0

        for line in f:
            data=line.replace("\n", "")
            if line_count == 0:
                zdr=data.split(',')
                num_hdr=len(zdr)
                hdr=[]
                for i in range(0,num_hdr):
                    char_tmp=zdr[i]
                    # c=char_tmp.strip()
                    d=char_tmp.strip('"')
                    hdr.append(d)
                    if d == "Latitude":
                        ilat=i 
                    if d == "Longitude":
                        ilon=i 
                    if d == "ValidDate":
                        idate=i 
                    if d == "ValidTime":
                        itime=i 
                    if d == "OZONE":
                        io3=i 
                    if d == "OZONE_Unit":
                        io3unit=i 
                    if d == "PM25":
                        ipm25=i 
                    if d == "PM25_Unit":
                        ipm25unit=i 
                    if d == "PM10":
                        ipm10=i 
                    if d == "PM10_Unit":
                        ipm10unit=i 
            else:
                b=data.split('","')
                var=[]
                for i in range(0,num_hdr):
                    char_tmp=b[i]
                    ## c=char_tmp.strip()
                    d=char_tmp.strip('"')
                    var.append(d)
            if line_count > 0:
                if var[io3]:
                    num_o3 += 1
                    o3lat.append(float(var[ilat]))
                    o3lon.append(float(var[ilon]))
                    if var[io3unit] == "PPB":
                        o3conc.append(float(var[io3]))
                    if var[io3unit] == "PPM":
                        atmp=1000.*float(var[io3])
                        o3conc.append(atmp)
                if var[ipm25]:
                    num_pm25 += 1
                    pm25lat.append(float(var[ilat]))
                    pm25lon.append(float(var[ilon]))
                    if var[ipm25unit] == "UG/M3":
                        pm25conc.append(float(var[ipm25]))
                    else:
                        print("NEED ATTENTION for PM25 UNIT is not UG/M3")
                if var[ipm10]:
                    num_pm10 += 1
                    pm10lat.append(float(var[ilat]))
                    pm10lon.append(float(var[ilon]))
                    if var[ipm10unit] == "UG/M3":
                        pm10conc.append(float(var[ipm10]))
                    else:
                        print("NEED ATTENTION for PM10 UNIT is not UG/M3")
            line_count += 1
        print("Total number of for o3, pm25, and pm10 are = "+str(num_o3)+", "+str(num_pm25)+", "+str(num_pm10))
        print("Total number of stations = "+str(line_count-1))
        f.close()
    
        o3_color=[]
        pm25_color=[]
        pm10_color=[]
        o3_color=get_o3_color(o3conc)
        i=len(o3_color)
        print("o3_color size = "+str(i))
        pm25_color=get_pm_color(pm25conc)
        i=len(pm25_color)
        print("pm25_color size = "+str(i))
        pm10_color=get_pm_color(pm10conc)
        i=len(pm10_color)
        print("pm10_color size = "+str(i))
        i=len(o3conc)
        print("o3conc size = "+str(i))
        i=len(pm25conc)
        print("pm25conc size = "+str(i))
        i=len(pm10conc)
        print("pm10_conc size = "+str(i))
    # ax = plt.axes(projection=ccrs.PlateCarree())
    # ax = plt.axes(projection=ccrs.PlateCarree(central_longitude=180))
    
    ##ax = plt.axes(projection=ccrs.LambertConformal(central_longitude=-96.0, central_latitude=39.0, false_easting=0.0, false_northing=0.0, secant_latitudes=None, standard_parallels=None, globe=None, cutoff=-30)
        ## Plot ozone map first
        plt.figure(figsize=(12, 6))
        for i in range(0,ilen):
            if int(iplot[i]) == 1: 
                ## print("plot "+title[i])
                figarea=reg[i]
                extent = [ rlon0[i], rlon1[i], rlat0[i], rlat1[i] ]
                clon=0.5*(rlon0[i]+rlon1[i])
                clat=0.5*(rlat0[i]+rlat1[i])
                ## ax = plt.axes(projection=ccrs.LambertConformal(central_longitude=-120.628, central_latitude=21.821, false_easting=-58.775, false_northing=48.772, standard_parallels=(33, 45), globe=None))
                ##
                ## Plot o3
                ##
                if figarea == "ak":
                    aqmproj=ccrs.LambertConformal(central_longitude=clon, central_latitude=clat, false_easting=-58.775, false_northing=48.772, standard_parallels=(57, 63), globe=None)
                elif figarea == "hi":
                    aqmproj=ccrs.LambertConformal(central_longitude=clon, central_latitude=clat, standard_parallels=(19, 21), globe=None)
                else:
                    aqmproj=ccrs.LambertConformal(central_longitude=clon, central_latitude=clat, standard_parallels=(33, 45), globe=None)
                ax = plt.axes(projection=aqmproj)
                ## ax = plt.axes(projection=ccrs.PlateCarree())
                ax.set_extent(extent)
                states_provinces = cfeature.NaturalEarthFeature(
                    category='cultural',
                    name='admin_1_states_provinces_lines',
                    scale='50m',
                    facecolor='none')
                rivers_50m = cfeature.NaturalEarthFeature('physical', 'rivers_lake_centerlines', '50m')
                ax.add_feature(states_provinces, edgecolor='gray')
                ## ax.coastlines('50m')
                ax.add_feature(cfeature.BORDERS, linestyle=':')
                ax.add_feature(cfeature.OCEAN)
                ax.add_feature(cfeature.LAND, edgecolor='black')
                ax.add_feature(cfeature.LAKES, edgecolor='black')
                ## ax.set_title(label_date.strftime(YMD_date_format)+" EPA AQS O3 Obs")
                ax.set_title(label_date.strftime(YMD_date_format)+" "+label_date.strftime(H_date_format)+"Z EPA AQS O3 (ppb) Obs")
                ## ax.add_feature(rivers_50m, facecolor='None', edgecolor='b')
                ## ax.add_feature(cfeature.RIVERS)
                ## plt.show()
                for x in range(0,num_o3):
                  ax.plot(o3lon[x], o3lat[x], 'o', c=o3_color[x], markersize=symsize[i], transform=ccrs.PlateCarree())
                ##ax.text(-117, 33, 'San Diego', transform=ccrs.Geodetic())
                fileout=figout+"/epaaqs_o3."+figarea+"."+label_date.strftime(YMD_date_format)+"."+label_date.strftime(H_date_format)+".k1.png"
                plt.savefig(fileout, bbox_inches='tight') 
                ##
                ## Plot pm25
                ##
                if figarea == "ak":
                    aqmproj=ccrs.LambertConformal(central_longitude=clon, central_latitude=clat, false_easting=-58.775, false_northing=48.772, standard_parallels=(57, 63), globe=None)
                elif figarea == "hi":
                    aqmproj=ccrs.LambertConformal(central_longitude=clon, central_latitude=clat, standard_parallels=(19, 21), globe=None)
                else:
                    aqmproj=ccrs.LambertConformal(central_longitude=clon, central_latitude=clat, standard_parallels=(33, 45), globe=None)
                ax = plt.axes(projection=aqmproj)
                ax.set_extent(extent)
                states_provinces = cfeature.NaturalEarthFeature(
                    category='cultural',
                    name='admin_1_states_provinces_lines',
                    scale='50m',
                    facecolor='none')
                rivers_50m = cfeature.NaturalEarthFeature('physical', 'rivers_lake_centerlines', '50m')
                ax.add_feature(states_provinces, edgecolor='gray')
                ax.add_feature(cfeature.BORDERS, linestyle=':')
                ax.add_feature(cfeature.OCEAN)
                ax.add_feature(cfeature.LAND, edgecolor='black')
                ax.add_feature(cfeature.LAKES, edgecolor='black')
                ax.set_title(label_date.strftime(YMD_date_format)+" "+label_date.strftime(H_date_format)+"Z EPA AQS PM25 (ug/m3) Obs")
                for x in range(0,num_pm25):
                  ## ax.plot(pm25lon[x], pm25lat[x], 'o', c=(0.0000,1.0000,1.0000), markersize=symsize[i], markerfacecolor='C0', transform=ccrs.PlateCarree())
                  ax.plot(pm25lon[x], pm25lat[x], 'o', c=pm25_color[x], markersize=symsize[i], transform=ccrs.PlateCarree())
                fileout=figout+"/epaaqs_pm25."+figarea+"."+label_date.strftime(YMD_date_format)+"."+label_date.strftime(H_date_format)+".k1.png"
                plt.savefig(fileout, bbox_inches='tight') 
                ##
                ## Plot pm10
                ##
                if figarea == "ak":
                    aqmproj=ccrs.LambertConformal(central_longitude=clon, central_latitude=clat, false_easting=-58.775, false_northing=48.772, standard_parallels=(57, 63), globe=None)
                elif figarea == "hi":
                    aqmproj=ccrs.LambertConformal(central_longitude=clon, central_latitude=clat, standard_parallels=(19, 21), globe=None)
                else:
                    aqmproj=ccrs.LambertConformal(central_longitude=clon, central_latitude=clat, standard_parallels=(33, 45), globe=None)
                ax = plt.axes(projection=aqmproj)
                ax.set_extent(extent)
                states_provinces = cfeature.NaturalEarthFeature(
                    category='cultural',
                    name='admin_1_states_provinces_lines',
                    scale='50m',
                    facecolor='none')
                rivers_50m = cfeature.NaturalEarthFeature('physical', 'rivers_lake_centerlines', '50m')
                ax.add_feature(states_provinces, edgecolor='gray')
                ax.add_feature(cfeature.BORDERS, linestyle=':')
                ax.add_feature(cfeature.OCEAN)
                ax.add_feature(cfeature.LAND, edgecolor='black')
                ax.add_feature(cfeature.LAKES, edgecolor='black')
                ax.set_title(label_date.strftime(YMD_date_format)+" "+label_date.strftime(H_date_format)+"Z EPA AQS PM10 (ug/m3) Obs")
                for x in range(0,num_pm10):
                  ax.plot(pm10lon[x], pm10lat[x], 'o', c=pm25_color[x], markersize=symsize[i], transform=ccrs.PlateCarree())
                fileout=figout+"/epaaqs_pm10."+figarea+"."+label_date.strftime(YMD_date_format)+"."+label_date.strftime(H_date_format)+".k1.png"
                plt.savefig(fileout, bbox_inches='tight') 

        os.chdir(figout)
        ##parta=os.path.join("/usr", "bin", "scp")
        ##partb=os.path.join("hchuang@rzdm:", "home", "www", "emc", "htdocs", "mmb", "hchuang", "web", "fig", label_date.strftime(Y_date_format), label_date.strftime(YMD_date_format) )
        partb=os.path.join("hchuang@rzdm:", "home", "www", "emc", "htdocs", "mmb", "hchuang", "transfer")
        subprocess.call(["scp -p * "+partb], shell=True)
    else:
        print("Can not find "+filein)
    date = date + date_inc
